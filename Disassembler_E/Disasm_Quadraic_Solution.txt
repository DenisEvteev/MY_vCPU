func_a Two_Roots;
func Dickr;
push bx;
push bx;
mul;
pop dx;
push 4;
push ax;
mul;
push cx;
mul;
pop cx;
push dx;
push cx;
sub;
ret eax;
func Two_Roots;
push eax;
sqrt;
pop cx;
push 0;
push bx;
sub;
pop dx;
push dx;
push cx;
add;
push 2;
div;
push ax;
div;
pop bx;
push dx;
push cx;
sub;
push 2;
div;
push ax;
div;
ret eax;
%main;
in ax;
in bx;
in cx;
push ax;
push 0;
je :case1;
call Dickr;
push eax;
push 0;
jl :case3;
je :case2;
call Two_Roots;
out eax;
push bx;
out ax;
end;
:case3;
push 999;
out ax;
end;
:case2;
push 0;
push bx;
sub;
push 2;
div;
push ax;
div;
out cx;
end;
:case1;
push 0;
push cx;
sub;
push bx;
div;
out dx;
